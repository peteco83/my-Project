{"version":3,"sources":["Home.js","ImdbID.js","Movies.js","App.js","index.js"],"names":["Home","className","ImdbID","props","useState","movieID","setMovieID","imdbID","match","params","movie","useEffect","fetch","process","then","res","json","console","log","src","Poster","alt","width","height","Title","Year","Director","imdbRating","Genre","Plot","Movies","movies","setMovies","isFetching","setFetching","input","setInput","page","setPage","radio","setRadio","privateKey","onSubmit","e","preventDefault","Search","value","onChange","target","required","type","name","length","map","i","key","to","path","exact","component","onClick","App","activeStyle","color","reactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dad66d38.chunk.js","sourcesContent":["import React from 'react'\nimport \"./home.css\"\n\nexport default function Home() {\n    return (\n        <div className=\"home\">\n            <h1>MOVIE SELECTOR</h1>\n            <h2>Welcome to this movie or series search machine</h2>\n            <h3>To start searching your movie, please click on Search Movie</h3>\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react' \nimport \"./imdbID.css\"\n\nexport default function ImdbID(props) {\n    // console.log(props)\n    let [movieID, setMovieID] = useState([])\n    const privateKey = process.env.REACT_APP_KEY\n\n    let {match} = props\n\n    let imdbID = match.params.movie\n    \n    useEffect(() => {\n            fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${imdbID}&r=json`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": privateKey,\n            }\n            }).then(res => res.json())\n                    .then(movie => {\n                        console.log(movie);\n\n                        setMovieID(movie)\n                        // setFetching(false)\n                    }) \n                \n                \n            }, [imdbID])\n    \n\n    return (\n    \n        <div className=\"container-moviesimdb\">\n            <img src={movieID.Poster} alt={movieID.Poster} width=\"500\" height=\"700\"/>\n            <div className=\"container-info\">\n                <h2>Title: {movieID.Title}</h2>\n                <h2>Year: {movieID.Year}</h2>\n                <h2>Director: {movieID.Director}</h2>\n                <h2>imdbRating: {movieID.imdbRating}</h2>\n                <h2>Genre: {movieID.Genre}</h2>\n                <h2>Summary:</h2>\n                <p>{movieID.Plot}</p>\n            </div>\n        </div>\n        )\n}\n\n\n\n// Title: \"Batman v Superman: Dawn of Justice\"\n// Year: \"2016\"\n// Rated: \"PG-13\"\n// Released: \"25 Mar 2016\"\n// Runtime: \"151 min\"\n// Genre: \"Action, Adventure, Sci-Fi\"\n// Director: \"Zack Snyder\"\n// Writer: \"Chris Terrio, David S. Goyer, Bob Kane (Batman created by), Bill Finger (Batman created by), Jerry Siegel (Superman created by), Joe Shuster (Superman created by), William Moulton Marston (character created by: Wonder Woman)\"\n// Actors: \"Ben Affleck, Henry Cavill, Amy Adams, Jesse Eisenberg\"\n// Plot: \"Fearing that the actions of Superman are left unchecked, Batman takes on the Man of Steel, while the world wrestles with what kind of a hero it really needs.\"\n// Language: \"English\"\n// Country: \"USA\"\n// Awards: \"14 wins & 33 nominations.\"\n// Poster: \"https://m.media-amazon.com/images/M/MV5BYThjYzcyYzItNTVjNy00NDk0LTgwMWQtYjMwNmNlNWJhMzMyXkEyXkFqcGdeQXVyMTQxNzMzNDI@._V1_SX300.jpg\"\n// Ratings: (3) [{…}, {…}, {…}]\n// Metascore: \"44\"\n// imdbRating: \"6.5\"\n// imdbVotes: \"598,570\"\n// imdbID: \"tt2975590\"\n// Type: \"movie\"\n// DVD: \"19 Jul 2016\"\n// BoxOffice: \"$293,792,936\"\n// Production: \"Warner Bros. Pictures\"\n// Website: \"N/A\"\n// Response: \"True\"\n","import React, { useState } from 'react'\nimport { Route, Link} from 'react-router-dom'\nimport './movies.css'\nimport ImdbID from './ImdbID'\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([])\n    const [isFetching, setFetching] = useState(false)\n    const [input, setInput] = useState(\"\")\n    const [page, setPage] = useState(1)\n    const [radio, setRadio] = useState(\"movie\")\n    const privateKey = process.env.REACT_APP_KEY\n\n\n    const getData = () => {\n        setFetching(true)\n        // setInput(input.toString())\n        fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?r=json&type=${radio}&s=${input}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": privateKey\n            }\n        }).then(res => res.json())\n            .then(movie => {\n                // console.log(movie);\n\n                setMovies(movie.Search)\n                setFetching(false)\n            })\n    }\n\n    const searchMovie = (e) => {\n        e.preventDefault()\n        getData();\n    }\n\n    const fetchNextPage = () => {\n        setPage(page + 1)\n        fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?page=${page}&r=json&type=${radio}&s=${input}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": privateKey\n            }\n        }).then(res => res.json())\n            .then(movie => {\n                setMovies(movie.Search)\n                setFetching(false)\n            })\n    }\n\n    const fetchPrevPage = () => {\n        setPage(page - 1)\n        fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?page=${page}&r=json&type=${radio}&s=${input}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": privateKey\n            }\n        }).then(res => res.json())\n            .then(movie => {\n                console.log(movie.Search);\n                setMovies(movie.Search)\n                setFetching(false)\n            })\n    }\n\n\n    return (\n    \n            <div>\n                <form onSubmit={searchMovie}>\n                    <input value={input} onChange={(e) => setInput(e.target.value)} required />\n                    <label><input className=\"radio\" type=\"radio\" name=\"movie\" value=\"movie\" onChange={(e) => setRadio(e.target.value)} required />Movies</label>\n\n\n                    <label><input className=\"radio\" type=\"radio\" name=\"movie\" value=\"series\" onChange={(e) => setRadio(e.target.value)} required />Series</label>\n                    <button type=\"submit\">Search</button>\n                </form>\n\n                {isFetching && <h1>Loading...</h1>}\n                <div className=\"container-movies\">\n                    <ul className=\"list-movies\">\n                        {movies && movies.length > 0 ? movies.map((movie, i) => (\n                            <div key={i}>\n                        \n                                <li className=\"list\">{movie.Title}</li>\n                                \n                                <li className=\"list\">imdbID: <Link to={`/movies/${movie.imdbID}`}>{movie.imdbID}</Link></li>\n                            </div>\n                        )) : null}\n\n                    </ul>\n\n                            {/* in case I want to open a new page we have to put the route in the main file (app.js) */}\n                    <Route path={'/movies/:movie'} exact component={ImdbID}/>\n\n                    \n                </div>\n\n\n                <div>\n                    {movies && movies.length >= 10  ? \n                    \n                    <div>\n                    <button onClick={fetchPrevPage}>Previous</button>\n                    <button onClick={fetchNextPage}>Next</button> \n                    </div> : null}\n                </div>\n            </div>\n        \n        \n    )\n}\n\nexport default Movies\n","import React from 'react';\nimport Home from './Home';\nimport Movies from './Movies';\nimport './app.css'\nimport { BrowserRouter, NavLink, Route, Switch } from \"react-router-dom\"\n\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <header>\n          <ul className=\"header-ul\">\n            <li><NavLink className=\"navlink\" exact to=\"/\" activeStyle={{ color: \"black\" }}>Home</NavLink></li>\n            <li><NavLink className=\"navlink\" to=\"/movies\" activeStyle={{ color: \"black\" }} >Search Movie</NavLink></li>\n          </ul>\n        </header>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/movies\" >\n            <Movies />\n          </Route>\n        </Switch>\n\n        \n\n      </div>\n    </BrowserRouter>\n  )\n}\n\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}